# ========= Character =========
# Name ({0} is the id)
core.character.name.default=Unnamed Character #{0}

# Abilities
core.character.ability.strength=Strength
core.character.ability.dexterity=Dexterity
core.character.ability.constitution=Constitution
core.character.ability.intelligence=Intelligence
core.character.ability.wisdom=Wisdom
core.character.ability.charisma=Charisma

# Ability Abbreviations
core.character.ability.str=STR
core.character.ability.dex=DEX
core.character.ability.con=CON
core.character.ability.int=INT
core.character.ability.wis=WIS
core.character.ability.cha=CHA

core.character.ability.check.default=Default Ability Check

# Proficiencies
core.character.ability.proficiencies.default_proficiency_description=Not proficient by default
core.character.ability.proficiencies.proficiency_bonus_default_calculation=calculated from total character level
core.character.ability.proficiencies.proficiency_bonus_default_description=default proficiency bonus
core.character.ability.proficiencies.proficiency_bonus_abbreviation=PB
core.character.ability.proficiencies.not_proficient=Not proficient
core.character.ability.proficiencies.proficient=Proficient
core.character.ability.proficiencies.half_proficient=Half proficient
core.character.ability.proficiencies.expertise=Expertise

# Hit Points
core.character.hit_points.max.rolled_hit_dice=rolled hit dice
core.character.hit_points.max.base=Base HP Max

# Armor Class
core.character.armor_class.default=Default AC

# Classes
core.character.classes.total_level_calculation_step={0} ({1})
core.character.classes.total_level_default_description=Sum of class levels

# ---- Modifiers -----
# Override ({0} is the override value)
core.character.modifier.override.operator=-> {0}
core.character.modifier.override.value=Override Value
core.character.modifier.override.source=Custom Override

# Multiplicative ({0} is the multiplier)
core.character.modifier.multiplicative.operator=* {0}

# Additive ({0} is the bonus)
core.character.modifier.additive.operator=+ {0}

# ========= Other =========
# Dice expression like 2d8 ({0} is the number of dice, {1} is the number of sides per dice)
dice.atomic_dice_expression={0}d{1}
# Dice expression like 2d8 + 1d6 ({0} is the first dice expression, {1} is the second dice expression)
dice.sum.operator=+
dice.difference.operator=-

generic.sum.operator=+
